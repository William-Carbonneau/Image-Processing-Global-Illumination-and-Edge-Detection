<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.scene.control.Accordion?>
<?import javafx.scene.control.Label?>
<?import javafx.scene.control.ScrollPane?>
<?import javafx.scene.control.TitledPane?>
<?import javafx.scene.layout.VBox?>
<?import javafx.scene.text.Font?>
<?import javafx.scene.text.Text?>
<?import javafx.scene.text.TextFlow?>


<VBox alignment="TOP_CENTER" maxHeight="-Infinity" maxWidth="-Infinity" minHeight="-Infinity" minWidth="-Infinity" prefHeight="400.0" prefWidth="600.0" xmlns="http://javafx.com/javafx/20.0.1" xmlns:fx="http://javafx.com/fxml/1">
   <children>
      <Label text="About Convolutions">
         <font>
            <Font name="System Bold" size="31.0" />
         </font>
      </Label>
      <Accordion>
        <panes>
          <TitledPane animated="false" text="General">
               <content>
                  <ScrollPane prefHeight="200.0" prefWidth="200.0">
                     <content>
                        <TextFlow prefHeight="200.0" prefWidth="598.0">
                           <children>
                              <Text strokeType="OUTSIDE" strokeWidth="0.0" text=
"This part of the application performs a convolution on an image. Start by choosing a convolution type from the choicebox by clicking on it. 
Then, choose an image. To choose an image, you have access to a database. Click on the database icon, and a database viewer will appear. 
Click on the image you want to convolve. Then, close the window, and the image should appear on the main window. An image can also be chosen 
from a File Chooser. To use this functionality, click on the Files Icon. A File Chooser should appear. Then, choose the image. Make sure 
that the image chosen is of type .bmp. If an image of this type is selected, it should appear on the main screen. Then, click on convolve 
to convolve the image. Certain convolutions will have a threshold. You can specify the threshold in the text field. You can also perform 
the same convolution multiple times. To use this option, enter the number of iterations in the text field # of Iterations." wrappingWidth="372.5367240905762" />
                           </children>
                        </TextFlow>
                     </content>
                  </ScrollPane>
               </content>
          </TitledPane>
            <TitledPane animated="false" text="Gaussian Blur">
               <content>
                  <ScrollPane prefHeight="200.0" prefWidth="200.0">
                     <content>
                        <TextFlow prefHeight="200.0" prefWidth="598.0">
                           <children>
                              <Text strokeType="OUTSIDE" strokeWidth="0.0" text=
"Gaussian Blur: The Gaussian Blur is a filter that blurs an image. The program offers 3 different variations based on their dimensions. 
&#13;The first one is a 3x3 kernel:
&#13;[1,2,1]
&#13;[2,4,2]
&#13;[1,2,1]
&#13;The second one is a 5x5 kernel:
&#13;[1,  4,  7,  4, 1]
&#13;[4, 16, 26, 16, 4]
&#13;[7, 26, 41, 26, 7]
&#13;[4, 16, 26, 16, 4]
&#13;[1,  4,  7,  4, 1]
&#13;The third one is a 7x7 kernel:
&#13;[0,  0,  1,   2,  1,  0, 0]
&#13;[0,  3, 13,  22, 13,  3, 0]
&#13;[1, 13, 59,  97, 59, 13, 1]
&#13;[2, 22, 97, 159, 97, 22, 2]
&#13;[1, 13, 59,  97, 59, 13, 1]
&#13;[0,  3, 13,  22, 13,  3, 0]
&#13;[0,  0,  1,   2,  1,  0, 0]
&#13;The more dimensions a Gaussian has, the better it is at blurring an image." wrappingWidth="372.5367240905762" />
                           </children>
                        </TextFlow>
                     </content>
                  </ScrollPane>
               </content>
            </TitledPane>
            <TitledPane animated="false" text="Sharpening">
               <content>
                  <ScrollPane prefHeight="200.0" prefWidth="200.0">
                     <content>
                        <TextFlow prefHeight="200.0" prefWidth="598.0">
                           <children>
                              <Text strokeType="OUTSIDE" strokeWidth="0.0" text=
"Sharpening: The sharpening filter enhances the differences between adjacent pixels so that their differences is better shown. 
&#13;The sharpening kernel used is:
&#13;[ 0, -1,  0]
&#13;[-1,  5, -1]
&#13;[ 0, -1,  0]
&#13; Since the negative values are compared to positive ones, it is possible that the value of a pixel exceeds 255. In that case, the value the pixel is simply set to 255.
&#13; The value of a pixel can also be smaller than 0. Then, the value of the pixel is simply set to 0.
&#13;"
                                    wrappingWidth="372.5367240905762" />
                           </children>
                        </TextFlow>
                     </content>
                  </ScrollPane>
               </content>
            </TitledPane>
            <TitledPane animated="false" text="Grayscale">
               <content>
                  <ScrollPane prefHeight="200.0" prefWidth="200.0">
                     <content>
                        <TextFlow prefHeight="200.0" prefWidth="598.0">
                           <children>
                              <Text strokeType="OUTSIDE" strokeWidth="0.0" text = 
"Grayscale: Unlike the other convolutions, this filter is an averaging filter that does not depend on its surrounding pixels.
Instead, it averages the Red, Green, and Blue value of a pixel, because a grayscale value is a pixel whose Red, Green, and Blue values are all equal.
Therefore, it does not use a kernel." wrappingWidth="372.5367240905762" />
                           </children>
                        </TextFlow>
                     </content>
                  </ScrollPane>
               </content>
            </TitledPane>
            <TitledPane animated="false" text="Edge Detection">
               <content>
                  <ScrollPane prefHeight="200.0" prefWidth="200.0">
                     <content>
                        <TextFlow prefHeight="200.0" prefWidth="598.0">
                           <children>
                              <Text strokeType="OUTSIDE" strokeWidth="0.0" text = 
"Sobel is an edge detection algorithm. It comes in three different variations: Sobel X, Sobel Y, Sobel Classic, and Sobel Coloured.
All four of them uses the same 2 kernels:
&#13;1st Kernel (X Axis):
&#13;[ -1, -2, -1]
&#13;[  0,  0,  0]
&#13;[  1,  2,  1]
&#13;2nd Kernel (Y Axis)
&#13;[ -1,  0,  1]
&#13;[ -2,  0,  2]
&#13;[ -1,  0,  1]
&#13;The Sobel X convolution detects the edges along the X axis.
&#13;The Sobel Y convolution detects the edges along the Y axis.
&#13;For both of these convolution, a threshold can be specified, which corresponds to the minimum difference required for a difference to be considered as an edge.
&#13;The Sobel Classic is the regular Sobel Edge Detection algorithm: It goes through every pixel, performs Sobel X and Y, calculates a general difference using Pythagora, and associates a gradient value to this pixel.
&#13;The Sobel Coloured performs the Sobel Classic algorithm on the Red, Green and Blue values.
&#13;The Prewitt is very similar to the Sobel: The algorithm is exactly the same. The only difference is that it uses different kernels:
&#13;Kernel 1:
&#13;[ 1, 1, 1]
&#13;[ 0, 0, 0]
&#13;[-1,-1,-1]
&#13;Kernel 2:
&#13;[1,0,-1]
&#13;[1,0,-1]
&#13;[1,0,-1]
&#13;The colored edge angles also depends on edge detection convolutions. The one we implemented uses the Sobel X and Sobel Y values.
 Then, using an arctan function, it is possible to calculate the angle of each pixel based on the X and Y values. Finally, each pixel gets assigned a color based on its angle.
" wrappingWidth="372.5367240905762" />
                           </children>
                        </TextFlow>
                     </content>
                  </ScrollPane>
               </content>
            </TitledPane>
            <TitledPane animated="false" text="Lapplacian">
               <content>
                  <ScrollPane prefHeight="200.0" prefWidth="200.0">
                     <content>
                        <TextFlow prefHeight="200.0" prefWidth="598.0">
                           <children>
                              <Text strokeType="OUTSIDE" strokeWidth="0.0" text = 
"The Laplacian Operator calculates the second derivative of an image. That is the reason wy, when applied on an image, it will seem like the lines/edges of th eimage are doubled. 
The Laplacian operator has a kernel which approximates its result:
&#13;[0,  1, 0]
&#13;[1, -4, 1]
&#13;[0,  1, 0]
&#13;The idea is similar to the Edge Detection algorithms. The difference is that it only uses one single kernel, which calculates the difference between the centered pixel and those around it. 
However to avoid noises on the image, we blur and grayscale that image prior to performing the operation on the image.
&#13;The filter can also be done without a Gaussian blur. Its operator is then a 9x9 approximation kernel:
&#13;[0, 1, 1,   2,   2,   2, 1, 1, 0]
&#13;[1, 2, 4,   5,   5,   5, 4, 2, 1]
&#13;[1, 4, 5,   3,   0,   3, 5, 4, 1]
&#13;[2, 5, 3, -12, -24, -12, 3, 5, 2]
&#13;[2, 5, 0, -24, -40, -24, 0, 5, 2]
&#13;[2, 5, 3, -12, -24, -12, 3, 5, 2]
&#13;[1, 4, 5,   3,   0,   3, 5, 4, 1]
&#13;[1, 2, 4,   5,   5,   5, 4, 2, 1]
&#13;[0, 1, 1,   2,   2,   2, 1, 1, 0]
" wrappingWidth="372.5367240905762" />
                           </children>
                        </TextFlow>
                     </content>
                  </ScrollPane>
               </content>
            </TitledPane>
            <TitledPane animated="false" text="Partial Convolutions">
               <content>
                  <ScrollPane prefHeight="200.0" prefWidth="200.0">
                     <content>
                        <TextFlow prefHeight="200.0" prefWidth="598.0">
                           <children>
                              <Text strokeType="OUTSIDE" strokeWidth="0.0" text=
"This part of the application lets you choose a specific width and height from the top-left corner of the image and performs simple convolutions on only the specified part of the image.
 The part of the image that is not in the specified region is kept the same as the original image.
 This function is only possible with simple convolutions with only one step, such as Gaussian blurs, sharpening, grayscale, and custum kernel convolutions." wrappingWidth="372.5367240905762" />
                           </children>
                        </TextFlow>
                     </content>
                  </ScrollPane>
               </content>
          </TitledPane>
        </panes>
      </Accordion>
   </children>
</VBox>
